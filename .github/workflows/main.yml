name: FastAPI CI
on: [push]
  #push:
    #branches:
    #  - main
jobs:

  CI:

  runs-on: ubuntu-latest
  strategy:
    matrix:
      python-version: [3.9]

  steps:
    # checkout repo so that our workflow can access it
    - uses: actions/checkout@v2

     # Step 1: Setup python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

      # Step 2 - Install Poetry virtual env
      #  Cache the installation of Poetry itself, e.g. the next step. This prevents the workflow
      # from installing Poetry every time, which can be slow.

    - name: cache poetry install
      uses: actions/cache@v2
      id: cache-venv
      with:
        path: ~/.local
        key: poetry-1.1.12-0

      # Install Poetry. You could do this manually, or there are several actions that do this.
      # `snok/install-poetry` seems to be minimal yet complete, and really just calls out to
      # Poetry's default install script, which feels correct. I pin the Poetry version here
      # because Poetry does occasionally change APIs between versions and I don't want my
      # actions to break if it does
        - uses: snok/install-poetry@v1
          with:
            version: 1.1.12
            virtualenvs-create: true
            virtualenvs-in-project: true

      # Cache your dependencies (i.e. all the stuff in your `pyproject.toml`). Note the cache
      # key: if you're using multiple Python versions, or multiple OSes, you'd need to include
      # them in the cache key. I'm not, so it can be simple and just depend on the poetry.lock.
      - name: cache deps
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}

      # Install dependencies. `--no-root` means "install all dependencies but not the project
      # itself", which is what you want to avoid caching _your_ code. The `if` statement
      # ensures this only runs on a cache miss.
      - run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'
      
    - name: Run Tests
      run: poetry shell && pytest




